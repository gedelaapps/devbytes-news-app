import { useState } from "react";
import { X, ExternalLink, Copy, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { useMutation } from "@tanstack/react-query";
import { newsAPI } from "@/lib/api";
import { useToast } from "@/hooks/use-toast";
import type { Article } from "@shared/schema";
import { formatDistanceToNow } from "date-fns";

interface TLDRModalProps {
  article: Article;
  isOpen: boolean;
  onClose: () => void;
}

export function TLDRModal({ article, isOpen, onClose }: TLDRModalProps) {
  const [summary, setSummary] = useState<string>("");
  const { toast } = useToast();

  const summaryMutation = useMutation({
    mutationFn: () => newsAPI.generateSummary(article.id),
    onSuccess: (data) => {
      setSummary(data.summary);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to generate summary. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleGenerateSummary = () => {
    if (!summary) {
      summaryMutation.mutate();
    }
  };

  const handleCopySummary = () => {
    if (summary) {
      navigator.clipboard.writeText(summary);
      toast({
        title: "Copied",
        description: "Summary copied to clipboard",
      });
    }
  };

  const formatPublishedDate = (date: Date | string) => {
    const publishedDate = typeof date === "string" ? new Date(date) : date;
    return formatDistanceToNow(publishedDate, { addSuffix: true });
  };

  // Trigger summary generation when modal opens
  useState(() => {
    if (isOpen && !summary && !summaryMutation.isPending) {
      handleGenerateSummary();
    }
  });

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-lg font-semibold text-gray-900 dark:text-white">
            Article Summary
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          {/* Article Info */}
          <div>
            <h4 className="font-medium text-gray-900 dark:text-white mb-2 line-clamp-2">
              {article.title}
            </h4>
            <div className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
              <span>{article.source}</span>
              <span>â€¢</span>
              <span>{formatPublishedDate(article.publishedAt)}</span>
              <Badge className="ml-2 text-xs">
                {article.category.charAt(0).toUpperCase() + article.category.slice(1)}
              </Badge>
            </div>
          </div>

          {/* Summary Content */}
          <div className="bg-[hsl(210,40%,98%)] dark:bg-[hsl(215,28%,7%)] p-4 rounded-lg">
            <h5 className="font-medium text-gray-900 dark:text-white mb-3">TL;DR Summary:</h5>
            
            {summaryMutation.isPending ? (
              <div className="flex items-center justify-center py-8">
                <Loader2 className="w-6 h-6 animate-spin text-[hsl(207,90%,54%)]" />
                <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">
                  Generating summary...
                </span>
              </div>
            ) : summary ? (
              <div className="text-sm text-gray-700 dark:text-gray-300 whitespace-pre-line">
                {summary}
              </div>
            ) : (
              <div className="text-center py-8">
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                  Click the button below to generate an AI-powered summary of this article.
                </p>
                <Button onClick={handleGenerateSummary} className="bg-[hsl(207,90%,54%)] hover:bg-blue-700">
                  Generate Summary
                </Button>
              </div>
            )}
          </div>

          {/* Footer Actions */}
          <div className="flex items-center justify-between pt-4 border-t border-[hsl(220,13%,91%)] dark:border-[hsl(220,13%,18%)]">
            <span className="text-xs text-gray-500 dark:text-gray-400">
              Generated by AI Assistant
            </span>
            <div className="flex space-x-2">
              {summary && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleCopySummary}
                  className="text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
                >
                  <Copy className="w-4 h-4 mr-1" />
                  Copy Summary
                </Button>
              )}
              <Button asChild>
                <a
                  href={article.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="bg-[hsl(207,90%,54%)] text-white hover:bg-blue-700 text-sm font-medium flex items-center space-x-1"
                >
                  <span>Read Full Article</span>
                  <ExternalLink className="w-4 h-4" />
                </a>
              </Button>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
